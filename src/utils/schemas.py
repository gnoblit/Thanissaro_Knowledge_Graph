from pydantic import BaseModel, Field
from typing import List, Literal

# The fixed list of allowed concept types for the second strategy
VALID_CONCEPT_TYPES = Literal[
    "Person", "Deity", "Place", "DoctrinalConcept", 
    "MentalState", "Practice", "Process", "Group"
]

# --- Schemas for Discovery Mode ---

class ConceptDiscovery(BaseModel):
    """Represents a concept where the type is discovered by the LLM."""
    concept_name: str = Field(..., description="A concise, normalized name for the concept.")
    concept_type: str = Field(..., description="A concise, logical category for the concept generated by the LLM.")
    evidence_quote: str = Field(..., description="The specific sentence or phrase from the text as evidence.")

class SuttaConceptsDiscovery(BaseModel):
    """A list of discovered concepts for a single Sutta."""
    concepts: List[ConceptDiscovery]

# --- Schemas for Fixed-List Mode ---

class ConceptFixed(BaseModel):
    """Represents a concept where the type must be from a predefined list."""
    concept_name: str = Field(..., description="A concise, normalized name for the concept.")
    concept_type: VALID_CONCEPT_TYPES  # <-- Pydantic will enforce this enumeration
    evidence_quote: str = Field(..., description="The specific sentence or phrase from the text as evidence.")

class SuttaConceptsFixed(BaseModel):
    """A list of fixed-type concepts for a single Sutta."""
    concepts: List[ConceptFixed]
